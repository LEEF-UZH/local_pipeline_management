#!/bin/bash

usage="
Usage: `basename $0` [options] source_directory
       
This script is a wrapper to make the running of the pipeline on local data easier. It is 
doing the following steps:

	- upload the data using 'upload'
	- cleaning the pipeline using 'clean'
	- preparing the pipeline using 'prepare'
	- running the pipeline using 'start'
	- stay active until the pipeline is finished. It will check ever 30 seconds and print 
	  sa "*"
	- when the pipeline has finished, download the log files into the current directory
	  using 'download_logs'
	- download the RRD using 'download_RRD'
	- create the diagnostic report . This depends on:
		- local installation of R and the LEEF.analysis package
		- the shared LEEF drive is mounted on /Volumes/LEEF as it is expected on a Mac.
		
Depending on if a directory or a file is specified as source or target, the behaviour 
differs slightly:

source_directory : directory with the raw data which will be uploaded to the pipeline 
									 and analysed. This folder has to contain the folders
									    - 00.general.parameter
									    - 0.raw.data 
									 
The transfer is done by using 'rsync'.

Options:
  -h, --help            Print short help message and exit
"

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
  echo "${usage}"
  exit 0
fi

############
############

FROM=$1
echo "#################################################"
echo "#####   Preparing pipeline   ####################"
echo "#################################################"
$(dirname "$0")/prepare $FROM

echo "#################################################"
echo "#####   Starting pipeline   #####################"
echo "#################################################"
$(dirname "$0")/start all

echo "#################################################"
echo "#####   Wait until done   #######################"
echo "#################################################"
echo You can quit this script by pressing CTRL-C and the pipeline will continue running.
echo To see if the pipeline has finished run 'wait_till_done'
echo which will end when the pipeline has finished running.
$(dirname "$0")/wait_till_done

echo "#################################################"
echo "#####   Copying logs to LEEF   ##################"
echo "#################################################"
$(dirname "$0")/to_leef_logs $FROM

echo "#################################################"
echo "#####   Copying RRD to LEEF   ###################"
echo "#################################################"
$(dirname "$0")/to_leef_rrd $FROM

echo "#################################################"
echo "#####   The pipeline has finished    ############"
echo "#####                                ############"
echo "#####   The logs are in the folder   ############"
echo "#####    0.Logs on the LEEF drive    ############"
echo "#####                                ############"
echo "#####   The RRD is in the folder     ############"
echo "#####    0.RRD on the LEEF drive     ############"
echo "#####    named 'NEW.LEEF.RRD.sqlite' ############"
echo "#####                                ############"
echo "#####   The next step(s) do not      ############"
echo "#####    influence the pipeline      ############"
echo "#####    and the pipelie has         ############"
echo "#####    finished.                   ############"
echo "#################################################"


echo "#################################################"
echo "#####   Creating Diagnostic Report   ############"
echo "#################################################"
$(dirname "$0")/report_diag /Volumes/LEEF/0.RRD/LEEF.RRD.$FROM.sqlite $FROM

echo "#################################################"
echo "#####   Please check the report named ###########"
echo "#####                                 ###########"
echo "#####   Diagnostic_Report.$FROM.html  ###########"
echo "#####    in the 0.RRD folder.         ###########"
echo "#####                                 ###########"
echo "#####   When the everything looks OK  ###########"
echo "#####    run the command 'clean'      ###########"
echo "#####    to clean the pipeline again. ###########"
echo "#################################################"
